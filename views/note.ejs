
<!DOCTYPE html>
<html lang="en">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Bloging App</title>
  <link rel="stylesheet" href="../public/css/style.css">
  <link rel="stylesheet" href="https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css" />
</head>
<body>
<%- include('include/header') %>


<a href="/notes/new" class="btn btn-primary mt-3">Create New Blog</a>
<% notes.forEach(note => { %>
  <div class="note-card">
    

    <h1 class="note-title"><%= note.title %></h1>
    <% if (note.imageUrl) { %>
      <img src="<%= note.imageUrl %>" alt="Note Image" ">
    <% } %>
    <p class="note-content"><%= note.content %></p>

    
   
  
    <button class="like-btn" data-note-id="<%= note._id %>" id="like-btn-<%= note._id %>">
      ❤️ <span id="like-count-<%= note._id %>"><%= note.likes.length || 0 %></span>
    </button>

    <h3>Comments</h3>
    <ul id="comment-list-<%= note._id %>">
      <% if (Array.isArray(note.comments) && note.comments.length > 0) { %>  
        <% note.comments.forEach(comment => { %>
          <li>
            <strong><%= comment.user ? comment.user.username : "Unknown User" %>:</strong> <%= comment.text %>
            <% if (user && (user.role === 'admin' || (comment.user && comment.user._id.toString() === user._id.toString()))) { %>
              <form action="/notes/<%= note._id %>/comments/delete/<%= comment._id %>" method="POST" class="delete-comment-form">
                <button type="submit" class="btn btn-danger btn-sm">Delete</button>
              </form>
            <% } %>
          </li>
        <% }) %>
      <% } else { %>
        <p>No comments yet.</p>
      <% } %>
    </ul>
    

    <% if (user) { %>

      <form action="/notes/<%= note._id %>/comments" method="POST" id="comment-form-<%= note._id %>">
        <div class="comment">
        <textarea name="text" class="text" required></textarea>
        <button type="submit" class="btn btn-primary comment-btn">Add Comment</button>
        </div>
      </form>
    <% } else { %>
      <p>You must be logged in to comment.</p>
    <% } %>

  </div>
<% }) %>

<%- include('include/footer') %>


<script>
  document.querySelectorAll('form[id^="comment-form-"]').forEach(form => {
    form.addEventListener('submit', async function(event) {
      event.preventDefault();  

      const noteId = this.id.replace('comment-form-', '');  
      const text = this.querySelector('textarea').value.trim();

      if (!text) {
        alert("Please enter a comment.");
        return;
      }

      try {
        const response = await fetch(`/notes/${noteId}/comments`, {
          method: 'POST',
          headers: { 'Content-Type': 'application/json' },
          body: JSON.stringify({ text })
        });

        const data = await response.json();

        if (response.ok) {
          const commentList = document.querySelector(`#comment-list-${noteId}`);
          const newComment = document.createElement("li");

          newComment.innerHTML = `
            <strong>${data.username || "Unknown User"}:</strong> ${text}
            <form action="/notes/${noteId}/comments/delete/${data.commentId}" method="POST" class="delete-comment-form">
              <button type="submit" class="btn btn-danger btn-sm">Delete</button>
            </form>
          `;

          commentList.appendChild(newComment);
          this.querySelector('textarea').value = "";

          attachDeleteListeners();
        } else {
          alert(data.error || "Error adding comment.");
        }
      } catch (error) {
        console.error('Error:', error);
        alert('Error adding comment.');
      }
    });
  });

  function attachDeleteListeners() {
    document.querySelectorAll(".delete-comment-form").forEach(form => {
      form.addEventListener("submit", async function (event) {
        event.preventDefault();

        const formAction = this.action;

        try {
          const response = await fetch(formAction, { method: "DELETE" });

          if (response.ok) {
            this.closest("li").remove(); 
          } else {
            alert("Error deleting comment.");
          }
        } catch (error) {
          console.error("Error:", error);
          alert("Error deleting comment.");
        }
      });
    });
  }

  attachDeleteListeners();

  document.querySelectorAll(".like-btn").forEach(button => {
    const noteId = button.getAttribute("data-note-id");
    const likeCountElement = document.getElementById(`like-count-${noteId}`);
    

    fetch(`/notes/${noteId}/like-status`)
      .then(response => response.json())
      .then(data => {
        likeCountElement.textContent = data.likes;
        
        if (data.liked) {
          button.classList.add("liked");
        } else {
          button.classList.remove("liked");
        }
      })
      .catch(error => console.error("Error fetching like status:", error));

   
    button.addEventListener("click", async function() {
      const likeCountElement = document.getElementById(`like-count-${noteId}`);

      try {
        const response = await fetch(`/notes/${noteId}/like`, {
          method: "POST",
          headers: { "Content-Type": "application/json" },
        });

        const data = await response.json();
        if (response.ok) {
          likeCountElement.textContent = data.likes;
          this.classList.toggle("liked"); 
        } else {
          alert("Error liking/unliking the note.");
        }
      } catch (error) {
        console.error("Error:", error);
        alert("Error liking/unliking the note.");
      }
    });
  });

  
</script>

